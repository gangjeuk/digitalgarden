
<style>
@import url("https://fonts.googleapis.com/css2?family=Noto+Sans+Arabic:wght@500&family=Noto+Sans+JP:wght@400;500&family=Noto+Sans+KR:wght@500&family=Open+Sans:wght@400;500&display=swap");

.dropdown {
    margin: 10px 0 0 4px;
}
.dropdown button {
  background-color: #253849;
  min-width: 100px;
  width: max-content;
  height: 40px;
  border-radius: 5px;
  color: white;
  padding: 10px;
  font-size: 16px;
  border: none;
  cursor: pointer;
  justify-content: space-evenly;
}
.dropdown button img {
  margin: 0 5px 0 0;
}
.dropdown button img,
.dropdown-content li img {
  width: 28px;
}
.dropdown button,
.dropdown-content li {
  display: flex;
  align-items: center;
  font-size: 14px;
  font-family: "Open Sans", sans-serif;
  font-family: "Noto Sans JP", sans-serif;
  font-family: "Noto Sans Arabic", sans-serif;
  font-family: "Noto Sans KR", sans-serif;
  font-weight: 500;
}
.arrow-down {
  width: 0;
  height: 0;
  display: inline-block;
  vertical-align: middle;
  border-style: solid;
  border-width: 4px 4px 0 4px;
  border-color: #fff transparent transparent transparent;
  margin: 0 0 0 5px;
}

.dropdown button:hover {
  cursor: pointer;
  background-color: #3c5b77;
}
/* Style for the dropdown content */
.dropdown-content {
  display: none;
  position: absolute;
  margin: 1px 0 0 0;
  padding: 0;
  background-color: #f5f5f5;
  min-width: 160px;
  box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
  z-index: 1;
  border-radius: 5px;
  overflow-y: scroll;
  max-height: 315px;
}
/* Style for the dropdown content items */
.dropdown-content li {
  color: black;
  padding: 12px 16px;
  text-decoration: none;
  justify-content: end;
}
.dropdown-content li img {
  margin: 0 20px 0px 20px;
}
/* Style for the dropdown content items on hover */
.dropdown-content li:hover {
  background-color: #f1f1f1;
  cursor: pointer;
  color: blue;
  border-radius: 5px;
}
/* Show the dropdown content when the dropdown button is clicked */
.dropdown:focus-within .dropdown-content {
  display: block;
}
/* Animate the dropdown content */
@keyframes slideIn {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}
.dropdown-content {
  animation: slideIn 0.3s ease-out;
}
/* Scrollbar styles */
::-webkit-scrollbar {
  width: 8px;
  height: 10px;
}
::-webkit-scrollbar-thumb {
  border-radius: 8px;
  background: #c2c9d2;
}

</style>

<script>
window.addEventListener('DOMContentLoaded', function () {

const locales = ["ko-KR", "en-US","ja-JP"];

function getFlagSrc(countryCode) {
  return /^[A-Z]{2}$/.test(countryCode)
       ? `https://flagsapi.com/${countryCode.toUpperCase()}/shiny/64.png`
    : "";
}
// @input: path
// Example:/notes/jp/computer/list
// @return: 'ja' or 'ko' or 'en'
function getLangbyPath(path) {
  // small exception for index page. will be deleted later
  // TODO
  if (path == '/'){
    return "ko";
  }

  let ret = path.split("/")[1];
  if (ret == "jp") {
    return "ja";
  } else if (ret == "kr") {
    return "ko";
  } 
  return ret;
}

const dropdownBtn = document.getElementById("dropdown-btn");
const dropdownContent = document.getElementById("dropdown-content");

function setSelectedLocale(locale) {
  const intlLocale = new Intl.Locale(locale);
  const langName = new Intl.DisplayNames([locale], {
    type: "language",
  }).of(intlLocale.language);

  // NJK grammar --> Spagetti!!
  // I have no idae how to clean this code 
  // However it will be transform like below
  //
  //lst["ja"] = "/jp/OS/作りながら理解する仮想化、（QEMUとKVMのコードを中心に）/"
  //lst["ko"] = "/kr/운영체제/가상화, QEMU와 KVM코드를 중심으로 보기(QEMU 만들어 보기)/"
                    
  let lst = []
            {% for mapping in userComputed.mapping %}
              {% for notePath, xhtmls in mapping %}
                {% if notePath == page.url %}
                  {% for xhtml in xhtmls %}
                    {% if notePath != xhtml.href %}
                      lst["{{xhtml.hreflang}}"] = [];
                      lst["{{xhtml.hreflang}}"] = "{{meta.siteBaseUrl}}{{xhtml.href | url}}";
                    {% endif %}
                  {% endfor %}
                {% endif %}
              {% endfor %}
            {% endfor %}
  // if empty, it means that this page is index page
  // also small exception for index page
  // TODO delete code below
  if(lst.length == 0)
  {
    lst["en"] = "https://deepfield.blog/en/index";
    lst["jp"] = "https://deepfield.blog/jp/index";
  }
  // TODO-end 

  dropdownContent.innerHTML = "";

  const otherLocales = locales.filter((loc) => loc !== locale);
  otherLocales.forEach((otherLocale) => {
    const otherIntlLocale = new Intl.Locale(otherLocale);
    const otherLangName = new Intl.DisplayNames([otherLocale], {
      type: "language",
    }).of(otherIntlLocale.language);

    const listEl = document.createElement("li");
    const key = otherLocale.slice(0, 2)
    const href = lst[key]
    listEl.innerHTML = `${otherLangName}<img src="${getFlagSrc(
      otherIntlLocale.region
    )}" />`;


    listEl.value = otherLocale;
    listEl.addEventListener("mousedown", function () {
      location.href=href;
      });
    dropdownContent.appendChild(listEl);
  });

  dropdownBtn.innerHTML = `<img src="${getFlagSrc(
    intlLocale.region
  )}" />${langName}<span class="arrow-down"></span>`;
}

setSelectedLocale(locales[0]);
const browserLang = getLangbyPath("{{ page.url | url }}")
for (const locale of locales) {
  const localeLang = locale.slice(0, 2)
  if (localeLang === browserLang) {
    setSelectedLocale(locale);
  }
}
})
</script>